conf\import\battle_conf.txt
//------------------------------------------------------------------------------
ADD:

// Arealoot, determine the range of arealoot
// Min: 1, Max: 10
// Default: 3
// 2 -> 2x2 range, 3 -> 3x3 range

arealoot_range: 3

//------------------------------------------------------------------------------

atcommand.cpp
//------------------------------------------------------------------------------
ADD:

/*==========================================
* @arealoot
*------------------------------------------*/
ACMD_FUNC(arealoot) {
	if (sd->state.arealoot) {
		sd->state.arealoot = 0;
		clif_displaymessage(sd->fd, "Arealoot is now disabled.");
		return 0;
	}

	sd->state.arealoot = 1;
	clif_displaymessage(sd->fd, "Arealoot is now enabled.");
	return 0;
}

//------------------------------------------------------------------------------

atcommand.cpp
//------------------------------------------------------------------------------
ADD:

//arealoot
ACMD_DEF(arealoot),

//------------------------------------------------------------------------------

battle.cpp
//------------------------------------------------------------------------------
ADD BELOW:

	{ "feature.privateairship",             &battle_config.feature_privateairship,          1,      0,      1,              },
	
	{ "arealoot_range",						&battle_config.arealoot_range,					3,		1,		10,			    },
	
//------------------------------------------------------------------------------

battle.hpp
//------------------------------------------------------------------------------
ADD BELOW:

	int feature_privateairship;
	
	int arealoot_range;
	
//------------------------------------------------------------------------------

clif.cpp
//------------------------------------------------------------------------------
REPLACE THE FULL FUNCTION:

void clif_parse_TakeItem(int fd, struct map_session_data *sd)
{
	struct flooritem_data *fitem;
	int map_object_id;
	int skill_greed(struct block_list *bl, va_list ap);

	//First we declare a variable that gets the return value
    int debug_i = 0;

	map_object_id = RFIFOL(fd,packet_db[RFIFOW(fd,0)].pos[0]);

	fitem = (struct flooritem_data*)map_id2bl(map_object_id);

	do {
		if (pc_isdead(sd)) {
			clif_clearunit_area(&sd->bl, CLR_DEAD);
			break;
		}

		if (fitem == NULL || fitem->bl.type != BL_ITEM || fitem->bl.m != sd->bl.m)
			break;

		if (pc_cant_act(sd))
			break;
		
		if (sd->state.arealoot) {
			//Config in .\conf\import\battle_conf.txt
			int range = battle_config.arealoot_range;

			//Show range value in the console if need it
			//ShowDebug("arealoot_range: %d\n", range);

			//Now we give the variable
			debug_i = map_foreachinrange(skill_greed,&sd->bl,range,BL_ITEM,&sd->bl);

			//Now we print it to the map-server console so you can see what it is while playing
			//ShowDebug("@arealoot commands, debug_i = %d\n", debug_i);

			//Give fail packet if no item was looted
			if(debug_i != 0)
				break;
		} else {
 			if (!pc_takeitem(sd, fitem))
 				break;
		}
		return;
	} while (0);
	// Client REQUIRES a fail packet or you can no longer pick items.
	clif_additem(sd,0,0,6);
}
	
//------------------------------------------------------------------------------

pc.hpp
//------------------------------------------------------------------------------
ADD BELOW:

		bool sale_open;

		bool arealoot;
	
//------------------------------------------------------------------------------